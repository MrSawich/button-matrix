=====================
Матричная клавиатура
=====================

В этом уроке мы создадим матричную клавиатуру с помощью Arduino UNO. Матричная клавиатура - это тип клавиатуры, в которой кнопки соединены в матрицу из рядов и столбцов. Это эффективный способ подключения нескольких кнопок к Arduino с использованием минимального количества пинов. Для выполнения работы мы будем использовать сайт https://www.tinkercad.com , который имеет инструментарий для работы платы микроконтроллера Arduino UNO, но если у вас есть набор-комплект Ардуино вы можете собрать его самостоятельно по этому уроку. 

Введение
---------

Для работы на сайте вам понадобиться зарегистрироваться на сайте и создать новый проект.

.. image:: tinker/1.jpg
    :alt: Global map with sparse data
    :width: 600
.. image:: tinker/2.jpg
    :alt: Global map with sparse data
    :width: 600
.. image:: tinker/3.jpg
    :alt: Global map with sparse data
    :width: 600

Далее нам нужно взять из меню справа необходимые компоненты а именно "Arduino Uno R3" и уже собранную матричную клавиатуру "Keypad 4x4"

.. image:: tinker/4.jpg
    :alt: Global map with sparse data
    :width: 600

Схема матричной клавиатуры представляет собой способ подключения 16 кнопок в виде матрицы 4x4 к микроконтроллеру Arduino. Вместо того, чтобы подключать каждую кнопку к отдельному пину Arduino, матричная клавиатура использует эффективную схему, которая позволяет сократить количество необходимых пинов.

Вот как выглядит типичная схема матричной клавиатуры 4x4

.. image:: tinker/5.jpg
    :alt: Global map with sparse data
    :width: 600

В этой есть 4 строки (ряда) и 4 столбца. Каждая кнопка находится на пересечении строки и столбца. Чтобы подключить эту клавиатуру к Arduino UNO, вам нужно будет подключить строки к пинам цифрового вывода Arduino, а столбцы - к пинам входа.

Подключите строки клавиатуры (Row 1 - Row 4) к пинам цифрового вывода Arduino, например, к пинам 8, 9, 10, 11.
Подключите столбцы клавиатуры (Column 1 - Column 4) к пинам входа Arduino, например, к пинам 4, 5, 6, 7.

.. image:: tinker/6.png
    :alt: Global map with sparse data
    :width: 600

Используя эту схему, вы можете контролировать состояние 16 кнопок с помощью только 8 пинов Arduino. Микроконтроллер сканирует строки и столбцы, чтобы определить, какая кнопка нажата. Это достигается путем подачи напряжения на одну строку за раз и проверки состояния столбцов, чтобы определить, какая кнопка на пересечении была нажата.

Для обработки нажатий клавиш и определения, какая кнопка была нажата, можно использовать библиотеку Keypad для Arduino. Эта библиотека упрощает процесс считывания и интерпретации нажатий клавиш в матричной клавиатуре.

Код программы
--------------
Чтобы начать писать код для подключение сменим во вкладке "Code" режим с "Bloks" на режим "Text"

Подключим библиотеку "Keypad" и объявим две переменные наших столбцов и строк

.. code-block:: cpp

   #include <Keypad.h>
    const byte ROWS = 4;
    const byte COLS = 4;

Также нам нужно создать двумерный массив, назвоём его keys. Этот массив используется для сопоставления нажатых клавиш с их соответствующими символами. Когда вы считываете нажатие клавиши с клавиатуры, вы можете использовать этот массив, чтобы определить, какой символ соответствует данной кнопке.

.. code-block:: cpp

    char keys[ROWS][COLS] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
    };

Определим ещё два массива rowPins и colPins

.. code-block:: cpp

    byte rowPins[ROWS] = {8, 9, 10, 11};
    byte colPins[COLS] = {4, 5, 6, 7};

Эти массивы используются для настройки клавиатуры и указания Arduino, какие пины используются для считывания нажатий клавиш. Библиотека Keypad использует эту информацию для сканирования строк и столбцов, чтобы определить, какая кнопка была нажата.

Создадим экземпляр класса Keypad и инициализируем его с помощью заданных параметров.

.. code-block:: cpp

    Keypad matrix = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

В функции setup() мы инициализируем связь с монитором последовательного порта и начинаем работу с клавиатурой.

.. code-block:: cpp

    void setup() {
    Serial.begin(9600);
    keypad.begin(makeKeymap(keys));
    }

В функции loop() мы используем метод getKey() класса Keypad для считывания нажатых клавиш.

.. code-block:: cpp

    void loop() {
    char key = keypad.getKey();
       if (key) {
           Serial.println(key);
       }
    }

Таким образом благодаря библиотеке Keypad мы получим очень компактный и простой код

Вот полный код программы:

.. code-block:: cpp

    #include <Keypad.h>
    const byte ROWS = 4;
    const byte COLS = 4;
    char keys[ROWS][COLS] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
    };
    byte rowPins[ROWS] = {8, 9, 10, 11};
    byte colPins[COLS] = {4, 5, 6, 7};
    Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);
    void setup() {
    Serial.begin(9600);
    keypad.begin(makeKeymap(keys));
    }
    void loop() {
    char key = keypad.getKey();
       if (key) {
           Serial.println(key);
       }
    }




